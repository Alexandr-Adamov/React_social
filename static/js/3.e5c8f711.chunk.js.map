{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/content/Messages/Messages.module.css","components/content/Messages/Dialog/Dialog.module.css","components/content/Messages/Message/Message.module.css","components/content/Messages/Dialog/Dialog.tsx","components/content/Messages/Message/Message.tsx","components/content/Messages/Messages.tsx","components/content/Messages/MessagesContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","PureComponent","connect","module","exports","DialogItem","name","id","className","s","Message","message","maxLength300","maxLengthCreator","AddNewMessageForm","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","placeholder","validate","required","type","Messages","names","messages","dialogsItems","map","n","Dialog","key","messagesItems","m","dialogs","inputForm","values","addMessageActionCreator","messageText","actions","compose","messagesPage"],"mappings":"2NAKMA,EAA6B,SAACC,GAAD,MAA0B,CAC3DC,OAAQD,EAAME,KAAKD,SAORE,EAAmB,SAACC,GAAoC,IAC7DC,EAD4D,uKAI9D,OAAsB,IADYC,KAAKC,MAA/BN,OAEC,kBAAC,IAAD,CAAUO,GAAG,WAEf,kBAACJ,EAAcE,KAAKC,WAPmC,GAClCE,iBAUhC,OADqBC,YAAQX,EAARW,CAAoCL,K,oBCtB3DM,EAAOC,QAAU,CAAC,QAAU,0BAA0B,MAAQ,wBAAwB,SAAW,6B,oBCAjGD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,MAAQ,sBAAsB,KAAO,uB,oBCAzFD,EAAOC,QAAU,CAAC,QAAU,2B,iJCabC,EARI,SAACN,GAAsB,IAChCO,EAAaP,EAAbO,KAAMC,EAAOR,EAAPQ,GACd,OACE,yBAAKC,UAAWC,IAAEH,MAChB,kBAAC,IAAD,CAASN,GAAE,oBAAeO,IAAOD,K,kBCGxBI,EATC,SAACX,GAAsB,IAC7BY,EAAYZ,EAAZY,QACR,OACE,yBAAKH,UAAWC,IAAEE,SACfA,I,gBCyBDC,EAAeC,YAAiB,IAUhCC,EAAoBC,YAAsB,CAAEC,KAAM,mBAA9BD,EARqC,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aAChE,OACE,0BAAMC,SAAUD,GACd,kBAACE,EAAA,EAAD,CAAOC,UAAWC,IAAUf,KAAK,cAAcgB,YAAY,qBAAqBC,SAAU,CAACX,EAAcY,OACzG,4BAAQC,KAAK,UAAb,8DAMSC,EAnCuB,SAAC3B,GACrC,IAGQ4B,EAAoB5B,EAApB4B,MAAOC,EAAa7B,EAAb6B,SACTC,EAAeF,EAAMG,KAAI,SAACC,GAAD,OAAO,kBAACC,EAAD,CAAY1B,KAAMyB,EAAEzB,KAAM2B,IAAKF,EAAExB,GAAIA,GAAIwB,EAAExB,QAC3E2B,EAAgBN,EAASE,KAAI,SAACK,GAAD,OAAO,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASsB,IAAKE,EAAE5B,GAAIA,GAAI4B,EAAE5B,QACxF,OACE,yBAAKC,UAAWC,IAAE2B,SAChB,yBAAK5B,UAAWC,IAAEkB,OACfE,GAEH,yBAAKrB,UAAWC,IAAEmB,UACfM,GAEH,yBAAK1B,UAAWC,IAAE4B,WAChB,uHACA,kBAACvB,EAAD,CAAmBI,SAhBN,SAACoB,GAClBvC,EAAMwC,wBAAwBD,EAAOE,mB,SCEnCD,EAA0BE,IAAQF,wBACzBG,sBACbxC,aATsB,SAACV,GAAD,MAA0B,CAEhDmC,MAAOnC,EAAMmD,aAAahB,MAC1BC,SAAUpC,EAAMmD,aAAaf,SAC7BnC,OAAQD,EAAME,KAAKD,UAMD,CAAE8C,4BACpB5C,IAHa+C,CAIbhB","file":"static/js/3.e5c8f711.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { appStateType } from '../redux/reduxStore';\r\n\r\nconst mapStateToPropsForRedirect = (state: appStateType) => ({\r\n  isAuth: state.auth.isAuth,\r\n\r\n});\r\n\r\ntype isAuthType = {\r\n  isAuth: boolean\r\n}\r\nexport const withAuthRedirect = (Component: React.ComponentType) => {\r\n  class RedirectComponent extends PureComponent<isAuthType> {\r\n    render() {\r\n      const { isAuth: isAuthBoolean } = this.props;\r\n      if (isAuthBoolean === false) {\r\n        return <Redirect to=\"/login\" />;\r\n      }\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n  const withRedirect = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n  return withRedirect;\r\n};\r\n\r\nexport default withAuthRedirect;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Messages_dialogs__1dM7K\",\"names\":\"Messages_names__3Ed3P\",\"messages\":\"Messages_messages__28yXq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__1Rtc1\",\"names\":\"Dialog_names__HYPXr\",\"name\":\"Dialog_name__9v-R8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__10-2n\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialog.module.css';\r\n\r\ntype propsType = { name: string, id: number }\r\n\r\nconst DialogItem = (props: propsType) => {\r\n  const { name, id } = props;\r\n  return (\r\n    <div className={s.name}>\r\n      <NavLink to={`/messages/${id}`}>{name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\ntype propsType ={message: string, id: number }\r\nconst Message = (props: propsType) => {\r\n  const { message } = props;\r\n  return (\r\n    <div className={s.message}>\r\n      {message}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport s from './Messages.module.css';\r\nimport DialogItem from './Dialog/Dialog';\r\nimport Message from './Message/Message';\r\nimport { Textarea } from '../../Forms/FormsControls';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validator';\r\n\r\n\r\n\r\nconst Messages: React.FC<propsType> = (props) => {\r\n  const addMessage = (values: valuesType) => {\r\n    props.addMessageActionCreator(values.messageText);\r\n  };\r\n  const { names, messages } = props;\r\n  const dialogsItems = names.map((n) => <DialogItem name={n.name} key={n.id} id={n.id} />);\r\n  const messagesItems = messages.map((m) => <Message message={m.message} key={m.id} id={m.id} />);\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.names}>\r\n        {dialogsItems}\r\n      </div>\r\n      <div className={s.messages}>\r\n        {messagesItems}\r\n      </div>\r\n      <div className={s.inputForm}>\r\n        <span>Новое сообщение</span>\r\n        <AddNewMessageForm onSubmit={addMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst maxLength300 = maxLengthCreator(50);\r\n\r\nconst addNewMessage: React.FC<InjectedFormProps<valuesType>> = ({ handleSubmit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field component={Textarea} name=\"messageText\" placeholder=\"Enter your message\" validate={[maxLength300, required]} />\r\n      <button type=\"submit\">Отправить</button>\r\n    </form>\r\n  );\r\n};\r\nconst AddNewMessageForm = reduxForm<valuesType>({ form: 'messageFormText' })(addNewMessage);\r\n\r\nexport default Messages;\r\n\r\n\r\ntype valuesType = {\r\n  messageText: string\r\n  values: { messageText: string }\r\n}\r\n\r\ntype namesType = {\r\n  name: string\r\n  id: number\r\n}\r\n\r\ntype messagesType = {\r\n  id: number\r\n  message: string\r\n}\r\n\r\ntype propsType = {\r\n  addMessageActionCreator: (messageText: string) => void\r\n  names: Array<namesType>\r\n  messages: Array<messagesType>\r\n}","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { actions } from '../../../redux/messageReducer';\r\nimport Messages from './Messages';\r\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect';\r\nimport { appStateType } from '../../../redux/reduxStore';\r\n\r\nconst mapStateToProps = (state: appStateType) => ({\r\n  // newMessageText: state.messagesPage.newMessageText,\r\n  names: state.messagesPage.names,\r\n  messages: state.messagesPage.messages,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nconst addMessageActionCreator = actions.addMessageActionCreator\r\nexport default compose<React.ComponentType>(\r\n  connect\r\n  (mapStateToProps, { addMessageActionCreator }),\r\n  withAuthRedirect,\r\n)(Messages);\r\n\r\n\r\n\r\n"],"sourceRoot":""}